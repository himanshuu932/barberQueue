const mongoose = require('mongoose');

// Barber History Schema
const BarberHistorySchema = new mongoose.Schema({
  services: { type: [String], required: true },
  totalCost: { type: Number, required: true },
  date: { type: Date, default: Date.now }
});

// Barber Schema
const BarberSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true }, // Consider adding unique: true if barbers have their own login
  phone: { type: String, required: true }, // Consider adding unique: true
  password: { type: String, required: true }, // If barbers log in separately
  totalCustomersServed: { type: Number, default: 0 },
  totalStarsEarned: { type: Number, default: 0 },
  totalRatings: { type: Number, default: 0 },
  ratings: { type: [Number], default: [] },
  history: { type: [BarberHistorySchema], default: [] }
});

// Queue Schema
const QueueSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    order: { type: Number, required: true },
    uid: { type: String }, // Customer UID if they are registered app users
    services: [{ type: String }],
    code: { type: String, required: true, unique: true }, // Ensure queue codes are unique per shop or globally if needed
    totalCost: { type: Number }
  },
  { timestamps: true }
);

const ShopSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  expoPushToken: { type: String },
  address: {
    textData: { type: String, default: "" },
    x: { type: Number, default: 0 }, // Latitude
    y: { type: Number, default: 0 }  // Longitude
  },
  trialStatus: {
    type: String,
    enum: ['trial', 'active', 'expired', 'cancelled'], // Added enum for clarity
    default: 'trial' //
  },
  trialStartDate: { type: Date, default: Date.now }, //
  trialEndDate: { type: Date }, // Will be set upon signup or after successful payment
  queues: [QueueSchema],
  barbers: [BarberSchema],
  rateList: {
    type: [
      {
        service: { type: String, required: true },
        price: { type: Number, required: true },
        // _id is automatically generated by Mongoose for subdocuments
      }
    ],
    default: []
  },
  history: { // Assuming this is shop's transaction/service history, distinct from barber history
    type: [{
        // Define structure for shop's own history if needed, e.g., services provided by the shop itself
        // For now, keeping it simple as an array.
        // If it refers to barber history aggregated at shop level, that's a different design.
        // The current `getHistoryByDate` and `getAllHistory` in controllers imply a shop-level history.
        // Let's assume a simple structure for now. If it's complex, it needs its own schema.
        type: mongoose.Schema.Types.Mixed // Placeholder, define more concretely if used
    }],
    default: []
  },
  lastPaymentDetails: { // For tracking the last successful payment
    orderId: { type: String },
    paymentId: { type: String },
    planId: { type: String }, // e.g., 'monthly', 'yearly'
    paymentDate: { type: Date },
    amountPaid: { type: Number } // Amount in smallest currency unit (e.g., paise)
  }
}, { timestamps: true }); // Adds createdAt and updatedAt timestamps


const Shop = mongoose.model("Shop", ShopSchema);
module.exports = Shop;